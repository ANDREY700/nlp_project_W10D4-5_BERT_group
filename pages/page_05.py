import streamlit as st
import requests
from PIL import Image
#from models.model import predict
from io import BytesIO
import cv2
import numpy as np
import ultralytics
from ultralytics import YOLO


st.title("üîç YOLO11: –î–µ—Ç–µ–∫—Ü–∏—è –≤–µ—Ç—Ä–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤")
st.write("üñº –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤.")

st.divider()

file_1 = st.file_uploader("üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ **–æ–¥–Ω–æ** –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])
file_2 = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ **–Ω–µ—Å–∫–æ–ª—å–∫–æ** –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", type=["jpg", "jpeg", "png"], accept_multiple_files=True)
url_pic = st.text_input("üåê –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

conf = st.slider("üéØ –£–∫–∞–∂–∏—Ç–µ confidence:", 0.0, 1.0, value=0.5)

st.divider()



def predict(img, conf):
    model = YOLO('models/best-5.pt')
    results = model(img, conf=conf)
    return results

if file_1:
    st.subheader('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:')
    img = Image.open(file_1)
    cols = st.columns(2)
    if conf:
        with cols[0]:
            st.image(img, caption='–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:')
        with cols[1]:
            
            img_cv2 = np.array(img)
            img_cv2 = cv2.cvtColor(img_cv2, cv2.COLOR_RGB2BGR)
            results = predict(img_cv2, conf)
            result_img = results[0].plot()
            result_pil = Image.fromarray(cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB))

            st.image(result_pil, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏:")


if file_2:
    st.subheader('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:')
    cols = st.columns(2)  # –î–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images = []
    captions = []
    
    for i, pic in enumerate(file_2):
        img = Image.open(pic)
        images.append(img)
        captions.append(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}")

    with cols[0]:
        st.image(images, caption=captions)

    if conf:
        processed_images = []
        
        for img in images:
            img_cv2 = np.array(img)
            img_cv2 = cv2.cvtColor(img_cv2, cv2.COLOR_RGB2BGR)
            results = predict(img_cv2, conf)
            result_img = results[0].plot()
            result_pil = Image.fromarray(cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB))
            processed_images.append(result_pil)

        with cols[1]:
            st.image(processed_images, caption=["–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ " + str(i+1) for i in range(len(images))])

if url_pic:
    st.subheader('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:')
    try:
        response = requests.get(url_pic)
        img = Image.open(BytesIO(response.content))
        if conf:
            cols = st.columns(2)
            with cols[0]:
                st.image(img, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            with cols[1]:
                img_cv2 = np.array(img)
                img_cv2 = cv2.cvtColor(img_cv2, cv2.COLOR_RGB2BGR)
                results = predict(img_cv2, conf)
                result_img = results[0].plot()
                result_pil = Image.fromarray(cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB))

                st.image(result_pil, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏")

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
